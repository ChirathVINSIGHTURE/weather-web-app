name: >-
  web-app-staging_env_67aede82-bb64-4834-a32a-6f7cdc7065fc_app_7fb48773-5bb0-404e-9eab-7ee300e96755
  Pipeline (Skyu Generated)
'on':
  push:
    branches:
      - staging
      - release/*
  workflow_dispatch: {}
  repository_dispatch:
    types: pipeline_eb4ce480-a750-438f-a5c4-182a103d4cc1
env:
  ENCODED_PIPELINE_SECRET: >-
    ${{secrets.SKYUWEBAPPTEST_ENV_67AEDE82BB644834A32A6F7CDC7065FC_APP_7FB487735BB0404E9EAB7EE300E96755_WEBAPPSTAGING_ENV_67AEDE82BB644834A32A6F7CDC7065FC_APP_7FB487735BB0404E9EAB7EE300E96755}}
  BUILD_ENVIRONEMENT_VERSION: latest
  WEB_APP_BUILD_FOLDER: build
  WEB_APP_S3_SYNC_URL: >-
    s3://skyu-project-2f6b8d97-8bc6-4d03-bcca-d2147f1b5422-webapps/staging/Demo-4-app
  WEB_APP_INSTALL_DEPS_COMMAND: npm i
  WEB_APP_BUILD_COMMAND: npm run build
  IMAGE_TAG: ${{github.event.client_payload.commitId || github.sha}}
  DEPLOY_STEP_SHOULD_DEPLOY: 'false'
jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Start
        run: >-
          echo " Starting GitHub Action!" && echo "IMAGE_EXISTS_IN_ECR=false" >>
          $GITHUB_ENV
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v2
      - name: 'Run :: Checkout Specific Commit'
        if: ${{ github.event.client_payload.commitId != null }}
        run: git checkout ${{ github.event.client_payload.commitId }}
      - name: 'Run :: Decoding Secrets'
        run: >-
          echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r
          'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo
          "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
      - name: 'Run :: Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.roleARN }}
          role-session-name: skyu-pipeline-assume-role-session
          aws-region: ${{ env.region }}
      - name: 'Run :: Set up Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.BUILD_ENVIRONEMENT_VERSION }}
      - name: 'Run :: Install Web App Dependancies'
        run: ${{ env.WEB_APP_INSTALL_DEPS_COMMAND }}
      - name: 'Run :: Build Web App'
        run: ${{ env.WEB_APP_BUILD_COMMAND }} && ls -R
      - name: 'Run :: Sync Web App with S3 bucket'
        run: >-
          aws s3 sync ${{ env.WEB_APP_BUILD_FOLDER }} ${{
          env.WEB_APP_S3_SYNC_URL }}
      - name: 'Run :: Deploy and Notify Resource Service'
        run: |2-

              response=$(curl -d "appType=WebApp&appVersionId=${{ env.DEPLOYMENT_APP_VERSION_ID }}&tag=${{ env.IMAGE_TAG }}&containerName=${{ env.DEPLOYMENT_CONTAINER_NAME }}&shouldDeploy=${{env.DEPLOY_STEP_SHOULD_DEPLOY}}&pipelineRunId=${{ github.run_id }}&commitDetails[commitHash]=${{ github.sha }}&commitDetails[commitAvatar]=https://github.com/${{ github.event.head_commit.author.name }}.png&commitDetails[commitTime]=${{ github.event.head_commit.timestamp }}&commitDetails[commitMessage]=\"${{ github.event.head_commit.message }}\"&commitDetails[commitUser]=${{ github.event.head_commit.author.name }}" -X PATCH -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.DEPLOYMENT_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.DEPLOYMENT_PROJECT_ID }}' -H 'x-environment-id: ${{ env.DEPLOYMENT_ENVIRONMENT_ID }}' -H 'x-application-id: ${{ env.DEPLOYMENT_APPLICATION_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded' '${{ env.DEPLOYMENT_ENDPOINT }}')

              if echo "$response" | grep -q '"success":true'; then
                echo "SUCCESS :: $response"
              else
                echo "FAILED :: $response"
              fi
            
