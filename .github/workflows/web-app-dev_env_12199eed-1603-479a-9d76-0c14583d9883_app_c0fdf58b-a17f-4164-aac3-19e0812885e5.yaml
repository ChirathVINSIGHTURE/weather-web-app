name: >-
  web-app-dev_env_12199eed-1603-479a-9d76-0c14583d9883_app_c0fdf58b-a17f-4164-aac3-19e0812885e5
  Pipeline (Skyu Generated)
'on':
  push:
    branches:
      - master
  workflow_dispatch: {}
  repository_dispatch:
    types: pipeline_7e9cbe82-b27c-419e-80c1-65b791409f4d
env:
  ENCODED_PIPELINE_SECRET: >-
    ${{secrets.SKYUWEBAPP_ENV_12199EED1603479A9D760C14583D9883_APP_C0FDF58BA17F4164AAC319E0812885E5_WEBAPPDEV_ENV_12199EED1603479A9D760C14583D9883_APP_C0FDF58BA17F4164AAC319E0812885E5_YAML}}
  BUILD_ENVIRONEMENT_VERSION: latest
  APP_BUILD_FOLDER: build
  S3_SYNC_URL: >-
    s3://skyu-project-ef675f23-db14-4843-93c7-fc931247adba-webapps/dev/iwiick-web-app-1
  APP_INSTALL_DEPS_COMMAND: npm i
  APP_BUILD_COMMAND: npm run build
  IMAGE_TAG: ${{github.event.client_payload.commitId || github.sha}}
  DEPLOY_STEP_SHOULD_DEPLOY: 'false'
jobs:
  code-scan:
    name: Code Scan
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: 'Run :: Checkout repository for Code Scan'
        uses: actions/checkout@v4
      - name: 'Run :: Decoding Secrets 02798a36-9d3e-4d50-9040-2497c1c02ce0'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Install Semgrep, Scan and Print'
        run: |2-

                  docker run -i -v "${PWD}:/src" semgrep/semgrep semgrep /src --json --quiet > semgrep_results.json
                  echo "Scan Results..."
                  cat semgrep_results.json
                
      - name: 'Run :: Upload Code Scan Report'
        run: |2-

                  SARIF_FILE="semgrep_results.json"
                  if [ -n "$SARIF_FILE" ]; then
                    cat "$SARIF_FILE" > ${{ env.IMAGE_TAG }}-codeql-result.sarif
                    echo "Uploading CodeQL Results to S3 :: ${{ env.IMAGE_TAG }}-codeql-result.sarif"
           
                    response=$(curl -X POST -F 'file=@${{ env.IMAGE_TAG }}-codeql-result.sarif' -F 'provider=aws' -F 'resourceType=codeql-report' -F 'cloudStoragePath=/${{ env.PIPELINE_APPLICATION_ID }}/codeql_results/'  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-auth-by: sa' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-resource-id: ${{ env.PIPELINE_APPLICATION_ID }}' -H 'Content-Type: multipart/form-data'  '${{ env.S3_UPLOAD_ENDPOINT }}')

                    if echo "$response" | grep -q '"success":true'; then
                      echo "SUCCESS :: $response"
                    else
                      echo "FAILED :: $response"
                    fi

                  else
                      echo "SARIF file not found."
                  fi
  _status-pending:
    name: _status Pending
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: 'Run :: Decoding Secrets 64ee0f79-dc6d-4f6e-8453-19f17497e7fa'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Started
        run: |2-

                response=$(curl -X PUT -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  '${{ env.API_GATEWAY_BASEURL }}/pipeline-service/${{ env.PIPELINE_ID }}/PENDING')

                if echo "$response" | grep -q '"success":true'; then
                  echo "SUCCESS :: $response"
                else
                  echo "FAILED :: $response"
                fi
              
  _release-info:
    name: _release Info
    permissions: write-all
    runs-on: ubuntu-latest
    if: ${{ github.event.client_payload.releaseData }}
    steps:
      - name: 'Run :: Decoding Secrets 8d6daf43-1480-420a-bb1c-2a54f2809aec'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Release
        run: |2-

                echo "Pipeline Release Information"
                echo "////////////////////////////"
                echo "releaseId         : ${{ github.event.client_payload.releaseData.releaseId }}"
                echo "pipelineId        : ${{ github.event.client_payload.releaseData.pipelineId }}"
                echo "pipelineRunId     : ${{ github.run_id }}"
                echo "applicationId     : ${{ github.event.client_payload.releaseData.appId }}"
                echo "versionId         : ${{ env.DEPLOYMENT_APP_VERSION_ID }}"
                echo "credentialId      : ${{ env.PIPELINE_CREDENTIAL_ID }}"

                echo "userName          : ${{ github.repository_owner }}"
                echo "repositoryName    : ${{ github.repository }}"

                echo "commitId          : ${{ env.IMAGE_TAG }}"
                echo "commitHash        : ${{ env.IMAGE_TAG }}"
                echo "commitAvatar      : https://github.com/${{ github.event.head_commit.author.name }}.png"
                echo "commitTime        : ${{ github.event.head_commit.timestamp }}"
                echo "commitMessage     : ${{ github.event.head_commit.message }}"
                echo "commitUser        : ${{ github.event.head_commit.author.name }}"

                echo "shouldDeploy      : ${{ env.DEPLOY_STEP_SHOULD_DEPLOY }}"
                echo "containerName     : ${{ env.DEPLOYMENT_CONTAINER_NAME }}"
                echo "imageRegistryURL  : ${{ env.IMAGE_NAME }}",

                # Storing Release Infomation for Deployment
                response=$(curl -X POST -d "releaseId=${{ github.event.client_payload.releaseData.releaseId }}&pipelineId=${{ github.event.client_payload.releaseData.pipelineId }}&pipelineRunId=${{ github.run_id }}&versionId=${{ env.DEPLOYMENT_APP_VERSION_ID }}&applicationId=${{ github.event.client_payload.releaseData.appId }}&credentialId=${{ env.PIPELINE_CREDENTIAL_ID }}&userName=${{ github.repository_owner }}&repositoryName=${{ github.repository }}&commitId=${{ env.IMAGE_TAG }}&commitData[commitHash]=${{ env.IMAGE_TAG }}&commitData[commitAvatar]=https://github.com/${{ github.event.head_commit.author.name }}.png&commitData[commitTime]=${{ github.event.head_commit.timestamp }}&commitData[commitMessage]=${{ github.event.head_commit.message }}&commitData[commitUser]=${{ github.event.head_commit.author.name }}&shouldDeploy=${{ env.DEPLOY_STEP_SHOULD_DEPLOY }}&containerName=${{ env.DEPLOYMENT_CONTAINER_NAME }}&imageRegistryURL=${{ env.IMAGE_NAME }}"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  '${{ env.API_GATEWAY_BASEURL }}/pipeline-service/release/pipeline')

                if echo "$response" | grep -q '"success":true'; then
                  echo "SUCCESS :: $response"
                else
                  echo "FAILED :: $response"
                fi
              
  build-and-sync-web-app:
    name: Build And Sync Web App
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Start
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v2
      - name: 'Run :: Checkout Specific Commit'
        if: ${{ github.event.client_payload.commitId != null }}
        run: |2-

              git fetch
              git checkout ${{ github.event.client_payload.commitId }}
      - name: 'Run :: Decoding Secrets 44b95801-714b-4948-b387-c7f353c8fdfe'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Configure AWS credentials 105975e2-247d-42d4-a23d-e0b7033a9a9a'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.roleARN }}
          role-session-name: skyu-pipeline-assume-role-session
          aws-region: ${{ env.region }}
      - name: 'Run :: Set up Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.BUILD_ENVIRONEMENT_VERSION }}
      - name: 'Run :: Install App Dependancies'
        run: ${{ env.APP_INSTALL_DEPS_COMMAND }}
      - name: 'Run :: Build App'
        run: ${{ env.APP_BUILD_COMMAND }} && ls
      - name: 'Run :: Sync Web App with S3 bucket'
        run: aws s3 sync ${{ env.APP_BUILD_FOLDER }} ${{ env.S3_SYNC_URL }}
  _status-success:
    name: _status Success
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - build-and-sync-web-app
    if: ${{ !(failure() || cancelled()) }}
    steps:
      - name: 'Run :: Decoding Secrets 78b64319-9a78-4126-9182-71f942ce5331'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Success
        run: |2-

              response=$(curl -X PUT -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  '${{ env.API_GATEWAY_BASEURL }}/pipeline-service/${{ env.PIPELINE_ID }}/SUCCESS')
              
  _status-failed:
    name: _status Failed
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - build-and-sync-web-app
    if: ${{ failure() || cancelled() }}
    steps:
      - name: 'Run :: Decoding Secrets 5ede9cc8-b105-49fa-8749-e019d68b41a3'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Failed
        run: |2-

              response=$(curl -X PUT -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  '${{ env.API_GATEWAY_BASEURL }}/pipeline-service/${{ env.PIPELINE_ID }}/FAILED')
              
  deploy:
    name: Deploy
    permissions: write-all
    runs-on: ubuntu-latest
    if: ${{ github.event.client_payload.releaseData == null }}
    steps:
      - name: 'Run :: Decoding Secrets 8903cf4f-3a1b-4f81-810f-4fc77a5e0cb3'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Deploy and Notify Resource Service'
        run: |2-
              
              response=$(curl -X PATCH -d "imageRegistryURL=${{ env.IMAGE_NAME }}&appVersionId=${{ env.DEPLOYMENT_APP_VERSION_ID }}&tag=${{ env.IMAGE_TAG }}&containerName=${{ env.DEPLOYMENT_CONTAINER_NAME }}&shouldDeploy=${{env.DEPLOY_STEP_SHOULD_DEPLOY}}&pipelineRunId=${{ github.run_id }}&commitDetails[commitHash]=${{ github.sha }}&commitDetails[commitAvatar]=https://github.com/${{ github.event.head_commit.author.name }}.png&commitDetails[commitTime]=${{ github.event.head_commit.timestamp }}&commitDetails[commitMessage]=${{ github.event.head_commit.message }}&commitDetails[commitUser]=${{ github.event.head_commit.author.name }}"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-application-id: ${{ env.PIPELINE_APPLICATION_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-resource-id: ${{ env.PIPELINE_APPLICATION_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  '${{ env.DEPLOYMENT_ENDPOINT }}')
              
              status_code=$?

              if [ $status_code -eq 0 ]; then
                if echo "$response" | grep -q '"success":true'; then
                  echo "SUCCESS :: $response"
                else
                  echo "FAILED :: $response"
                  exit 1
                fi
              else
                echo "Failed to deploy. HTTP status code: $status_code"
                exit 1
              fi
            
